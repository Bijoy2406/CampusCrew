Resetpassword Page

Invalid or Expired Token<

Your password reset link is invalid or has expired. 
                    Please request a new password reset link.<

Request New Reset Link
                    <

);
    }

    if (tokenValid === null) {
        return (
            <

Verifying reset token...<

);
    }

    return (
        <

}
            <

Reset Password<

);
    const [confirmPassword, setConfirmPassword] = useState(

);
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const [isValid, setIsValid] = useState(false);
    const [tokenValid, setTokenValid] = useState(null);
    const [loading, setLoading] = useState(false);
    const [pageLoading, setPageLoading] = useState(true);

    useEffect(() => {
        const timer = setTimeout(() => setPageLoading(false), 800);
        return () => clearTimeout(timer);
    }, []);

    const checkTokenValidity = async () => {
        try {
            const response = await fetch(`${backend_link}/api/verify-reset-token/${token}`);
            const data = await response.json();
            setTokenValid(data.valid);
        } catch (error) {
            console.error(

, error);
            setTokenValid(false);
        }
    };

    useEffect(() => {
        checkTokenValidity();
    }, [token]);

    

    // Toggle visibility for password field
    const togglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    // Toggle visibility for confirm password field
    const toggleConfirmPasswordVisibility = () => {
        setShowConfirmPassword(!showConfirmPassword);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        console.log(

);
    
        if (!isValid) {
            console.log(

);
            toast.error(

);
            return;
        }
    
        if (password !== confirmPassword) {
            console.log(

);
            toast.error(

);
            return;
        }
    
        setLoading(true);
    
        try {
            const response = await fetch(`${backend_link}/api/reset-password/${token}`, {
                method:

,
                headers: {

application/json

Password reset successfully!

); // Redirect to login page
                }, 3500); // 3.5 seconds delay
            } else {
                toast.error(data.message ||

);
            }
        } catch (error) {
            console.error(

, error);
            toast.error(

);
        } finally {
            setLoading(false);
        }
    };

    if (tokenValid === false) {
        return (
            <div className=

>
                <div className=

>
                    <h2>Invalid or Expired Token</h2>
                    <p>Your password reset link is invalid or has expired. 
                    Please request a new password reset link.</p>
                    <button 
                        className=

onClick={() => navigate(

)}
                    >
                        Request New Reset Link
                    </button>
                </div>
            </div>
        );
    }

    if (tokenValid === null) {
        return (
            <div className=

>
                <div className=

>
                    <div className=

></div>
                    <p>Verifying reset token...</p>
                </div>
            </div>
        );
    }

    return (
        <div className=

>
            {pageLoading && <Loader color={document.documentElement.getAttribute(

} />}
            <h4>Reset Password</h4>
            <form onSubmit={handleSubmit} className=

>
                {/* New Password Field */}
                <div className=

>
                    <input
                        type={showPassword ?

}
                        className=

placeholder=

value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                        disabled={loading}
                    />
                    {/* Eye Icon for toggling visibility */}
                    <span className=

onClick={togglePasswordVisibility}>
                        {showPassword ?

}
                    </span>
                </div>

                {/* Confirm Password Field */}
                <div className=

>
                    <input
                        type={showConfirmPassword ?

}
                        className=

placeholder=

value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                        required
                        disabled={loading}
                    />
                    {/* Eye Icon for toggling visibility */}
                    <span className=

onClick={toggleConfirmPasswordVisibility}>
                        {showConfirmPassword ?

}
                    </span>
                </div>

                {/* Password Requirements */}
                <div className=

>
                    <PasswordChecklist
                        rules={[

specialChar

]}
                        minLength={8}
                        value={password}
                        onChange={(isValid) => setIsValid(isValid)}
                    />
                </div>

                <button
                    type=

disabled={!isValid || password !== confirmPassword || loading}
                >
                    {loading ?

Reset Password