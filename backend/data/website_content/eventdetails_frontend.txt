Eventdetails Page

Back
        <

(
                <

))}
            <

)}

        {!loading && error && (
          <

Go Back
            <

)}

        {!loading && !error && event && (
          <

) : (
                <

No Image<

)}
              <

new Date() ? (
                  <

UPCOMING<

) : (
                  <

PAST<

)}
              <

Hosted by <

Date & Time<

Registration Ends<

Location<

Fee<

)}
                {event.prize_money !== 0 && (
                  <

Prize Money<

)}
                <

Created<

Category<

About this event<

Edit Event
                    <

Delete
                    <

) : (
                  <

Register Now
                      <

)}
                    {isRegistered && (
                      <

Unregister
                      <

)}
                    <

More Events
                    <

)}
              <

You have registered for this event.
                <

)}
            <

)}
      <

)} */}
    <

;
  const d = new Date(iso);
  return d.toLocaleString(undefined, {
    weekday:

,
    month:

,
    day:

,
    hour:

,
    minute:

,
  });
};

const shimmerLines = Array.from({ length: 6 });

function EventDetails() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { user, isAuthenticated } = useAuth();
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(

);
  const [isRegistered, setIsRegistered] = useState(false);
  const [regError, setRegError] = useState(

);
  const backend = import.meta.env.VITE_BACKEND_LINK;
  // editing handled on separate page now
  const eventID = useParams(id);
  const getRegistration = async () => {
    const eventId = eventID.id;
    try {
      const { data } = await axios.get(
        `${backend}/api/event/${eventId}/user/${user._id}`
      );
      if (data.success) {
        setIsRegistered(true);
      }
    } catch (error) {
      console.log(error);
    }
  };
  useEffect(() => {
    const load = async () => {
      try {
        const { data } = await apiService.getEvent(id);
        if (data.success) {
          setEvent(data.event);
          getRegistration();
        } else {
          setError(data.message ||

);
        }
      } catch (e) {
        setError(e.response?.data?.message ||

);
      } finally {
        setLoading(false);
      }
    };
    load();
  }, []);

  const openEdit = () => {
    if (event) navigate(`/events/${event._id}/edit`);
  };

  const deleteEvent = async () => {
    if (!event) return;
    if (!confirm(

)) return;
    try {
      const { data } = await apiService.deleteEvent(event._id);
      if (data.success) {
        showSuccessToast(

);
        
        // Clear events cache to ensure deleted event is removed from listings
        clearEventCaches();
        
        navigate(

);
      } else {
        setRegError(data.message ||

);
      }
    } catch (err) {
      setRegError(err.response?.data?.message ||

);
    }
  };

  const handleRegister = async () => {
    if (!isAuthenticated) {
      navigate(

);
      return;
    }
    if (!event) return;
    if (isRegistered) {
      return;
    }
    if (new Date(event.registration_deadline) < new Date()) return;

    setRegError(

);
    try {
      if (event.registration_fee === 0) {
        try {
          const { data } = await axios.post(`${backend}/api/register-event`, {
            userId: user._id,
            eventId: event._id,
          });
          if (data.success) {
            showSuccessToast(

);
            setIsRegistered(true);
          }
        } catch (error) {
          console.log(error.message);
        }
      } else {
        console.log(event.registration_fee);
        console.log(typeof event.registration_fee);
        // alert(

);
        try {
          const { data } = await axios.post(
            `${backend}/api/bkash/pay`,
            {
              amount: event.registration_fee,
              eventId: event._id,
              userId: user._id,
            },
            { withCredentials: true }
          );
          window.location.href = data.bkashURL;
          console.log(data);
        } catch (error) {
          console.log(error);
        }
      }

      // window.location.href = data.url;
    } catch (e) {
      setRegError(e.response?.data?.message ||

);
    } finally {
    }
  };

  const handleUnRegister = async () => {
    console.log(

);
    console.log(event._id);
    console.log(user._id);
    try {
      const { data } = await axios.put(`${backend}/api/unregister`, {
        userId: user._id,
        eventId: event._id,
      });
      if (data.success) {
        console.log(data);
        showSuccessToast(

);
        showSuccessToast(data.message);
      }
    } catch (error) {
      showErrorToast(

);
    }
  };

  return (
    <div className=

style={{ fontFamily:

}}>
      <Header />
      <main className=

>
        <button
          className=

onClick={() => navigate(-1)}
          aria-label=

>
          <span className=

>←</span> Back
        </button>

        {loading && (
          <div className=

>
            <div className=

/>
            <div className=

>
              {shimmerLines.map((_, i) => (
                <div
                  key={i}
                  className=

style={{ width: `${80 - i * 7}%` }}
                />
              ))}
            </div>
          </div>
        )}

        {!loading && error && (
          <div className=

>
            <p>{error}</p>
            <button
              onClick={() => navigate(

)}
              className=

>
              Go Back
            </button>
          </div>
        )}

        {!loading && !error && event && (
          <article className=

key={event._id}>
            <div className=

>
              {event.event_image ? (
                <img
                  src={event.event_image}
                  alt={event.title}
                  className=

/>
              ) : (
                <div className=

>No Image</div>
              )}
              <div className=

/>
              <div className=

>
                <span className=

>
                  {(event.event_type ||

).toUpperCase()}
                </span>
                {new Date(event.date) > new Date() ? (
                  <span className=

>UPCOMING</span>
                ) : (
                  <span className=

>PAST</span>
                )}
              </div>
            </div>

            <div className=

>
              <header className=

>
                <h1 className=

>{event.title}</h1>
                <p className=

>
                  Hosted by <strong>{event.organizer}</strong>
                </p>
              </header>

              <section className=

>
                <div className=

>
                  <h4>Date & Time</h4>
                  <p>{formatDateTime(event.date)}</p>
                </div>
                <div className=

>
                  <h4>Registration Ends</h4>
                  <p>{formatDateTime(event.registration_deadline)}</p>
                </div>
                <div className=

>
                  <h4>Location</h4>
                  <p>{event.location}</p>
                </div>
                {event.registration_fee !== 0 && (
                  <div className=

>
                    <h4>Fee</h4>
                    <p>
                      {event.registration_fee
                        ? `৳ ${event.registration_fee}`
                        :

}
                    </p>
                  </div>
                )}
                {event.prize_money !== 0 && (
                  <div className=

>
                    <h4>Prize Money</h4>
                    <p>{event.prize_money ? `৳ ${event.prize_money}` :

}</p>
                  </div>
                )}
                <div className=

>
                  <h4>Created</h4>
                  <p>{formatDateTime(event.createdAt)}</p>
                </div>
                <div className=

>
                  <h4>Category</h4>
                  <p>{event.category}</p>
                </div>
              </section>

              <section className=

>
                <h3>About this event</h3>
                <p>{event.description}</p>
              </section>

              <div className=

>
                {user?.isAdmin ? (
                  <>
                    <button className=

onClick={openEdit}>
                      Edit Event
                    </button>
                    <button className=

onClick={deleteEvent}>
                      Delete
                    </button>
                  </>
                ) : (
                  <>
                    {!isRegistered && (
                      <button
                        className={`ed-primaryBtn ${
                          !isRegistered ?

}`}
                        onClick={handleRegister}
                        disabled={isRegistered}
                      >
                        Register Now
                      </button>
                    )}
                    {isRegistered && (
                      <button
                        className={`ed-primaryBtn ${
                          !isRegistered ?

}`}
                        onClick={() => handleUnRegister()}
                      >
                        Unregister
                      </button>
                    )}
                    <button
                      className=

onClick={() => navigate(

)}
                    >
                      More Events
                    </button>
                  </>
                )}
              </div>
              {isRegistered && (
                <p
                  style={{
                    color:

,
                    fontSize:

,
                    marginTop:

,
                  }}
                >
                  You have registered for this event.
                </p>
              )}
            </div>
          </article>
        )}
      </main>
      <Footer />
      <ToastContainer />
      {/* {registering && (
        <Loader
          color={
            document.documentElement.getAttribute(