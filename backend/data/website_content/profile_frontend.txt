Profile Page

name[0]).join('').toUpperCase().slice(0, 2);
  };

  if (!isAuthenticated) {
    return (
      <

);
  }

  if (loading) {
    return (
      <

);
  }

  return (
    <

}
      {/* Header */}
      <

← Back to Home<

My Profile<

Logout<

) : (
                <

)}
              {!isEditing && (
                <

Change Photo<

)}
              {uploadingImage && (
                <

Uploading...<

)}
            <

Profile Details<

Email<

Location<

Date of Birth<

Status<

Edit Profile
                  <

Change Password
                  <

)}
              <

) : (
              <

Accepted formats: JPEG, PNG, GIF, WebP (Max: 3MB)<

Save<

Cancel<

)}
          <

Certificates<

Loading certificates...<

}
          {certsError && <

}
          {!certsLoading && !certsError && certificates.length === 0 && <

No certificates available yet. They appear after events end.<

0 && (
            <

Event<

Event Date<

Registered<

Action<

(
                    <

Download<

))}
                <

)}
        <

)}

      {/* Password Change Modal */}
      {showPasswordModal && (
        <

}
          <

Change Password<

: <

}
                <

: <

}
                <

: <

}
                <

Cancel
              <

)}
      <

,
    username:

,
    email:

,
    location:

,
    dob:

,
    profilePic:

,
    targetScore: 7.0,
    isAdmin: false,
    createdAt:

});

  const [editData, setEditData] = useState({ ...profileData });
  // Certificates state
  const [certificates, setCertificates] = useState([]);
  const [certsOpen, setCertsOpen] = useState(false);
  const [certsLoading, setCertsLoading] = useState(false);
  const [certsError, setCertsError] = useState(

);

  // Password change state
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [passwordData, setPasswordData] = useState({
    currentPassword:

,
    newPassword:

,
    confirmPassword:

});
  const [passwordLoading, setPasswordLoading] = useState(false);
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false
  });

  const loadCertificates = async () => {
    if (!profileData._id) return;
    setCertsLoading(true); setCertsError(

);
    try {
      const { data } = await apiService.getUserCertificates(profileData._id);
      if (data.success) setCertificates(data.certificates || []); else setCertsError(data.message ||

);
    } catch (e) {
      setCertsError(e.response?.data?.message ||

);
    } finally { setCertsLoading(false); }
  };

  const toggleCertificates = () => {
    const next = !certsOpen;
    setCertsOpen(next);
    if (next && certificates.length === 0) loadCertificates();
  };

  const handleDownloadCert = async (registrationId, eventTitle) => {
    try {
      const res = await apiService.downloadCertificate(registrationId);
      const blob = new Blob([res.data], { type:

});
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement(

);
      a.href = url;
      const safeTitle = (eventTitle ||

).replace(/[^a-z0-9]/gi,

);
      a.download = `Certificate_${safeTitle}.pdf`;
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    } catch (e) {
      toast.error(e.response?.data?.message ||

);
    }
  };

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!isAuthenticated) {
      navigate(

);
    } else {
      fetchProfile();
    }
  }, [isAuthenticated, navigate]);

  const fetchProfile = async () => {
    try {
      setLoading(true);
      const response = await apiService.getProfile();
      if (response.data.success) {
        const userData = response.data.user;
        setProfileData({
          _id: userData._id ||

,
          username: userData.username ||

,
          email: userData.email ||

,
          location: userData.location ||

,
          dob: userData.dob ? new Date(userData.dob).toISOString().split(

,
          profilePic: userData.profilePic ||

,
          targetScore: userData.targetScore || 7.0,
          isAdmin: userData.isAdmin || false,
          createdAt: userData.createdAt ||

});
      } else {
        toast.error(

);
      }
    } catch (error) {
      toast.error(

);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = () => {
    setIsEditing(true);
    setEditData({ ...profileData });
  };

  const handleCancel = () => {
    setIsEditing(false);
    setEditData({ ...profileData });
  };

  const handleSave = async () => {
    try {
      setLoading(true);
      const response = await apiService.updateProfile(editData);
      if (response.data.success) {
        const updatedUser = response.data.user;
        setProfileData({
          _id: updatedUser._id || profileData._id,
          username: updatedUser.username ||

,
          email: updatedUser.email ||

,
          location: updatedUser.location ||

,
          dob: updatedUser.dob ? new Date(updatedUser.dob).toISOString().split(

,
          profilePic: updatedUser.profilePic || profileData.profilePic,
          targetScore: updatedUser.targetScore || 7.0,
          isAdmin: updatedUser.isAdmin || false,
          createdAt: updatedUser.createdAt ||

});
        setIsEditing(false);
        toast.success(

);
      } else {
        toast.error(

);
      }
    } catch (error) {
      if (error.response?.data?.message) {
        toast.error(error.response.data.message);
      } else {
        toast.error(

);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    setEditData({
      ...editData,
      [e.target.name]: e.target.value
    });
  };

  // Password change functions
  const handlePasswordChange = (e) => {
    setPasswordData({
      ...passwordData,
      [e.target.name]: e.target.value
    });
  };

  const togglePasswordVisibility = (field) => {
    setShowPasswords({
      ...showPasswords,
      [field]: !showPasswords[field]
    });
  };

  const handlePasswordSubmit = async () => {
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      toast.error(

);
      return;
    }

    if (passwordData.newPassword.length < 6) {
      toast.error(

);
      return;
    }

    try {
      setPasswordLoading(true);
      const response = await apiService.changePassword({
        currentPassword: passwordData.currentPassword,
        newPassword: passwordData.newPassword
      });

      if (response.data.success) {
        toast.success(

);
        setShowPasswordModal(false);
        setPasswordData({
          currentPassword:

,
          newPassword:

,
          confirmPassword:

});
      } else {
        toast.error(response.data.message ||

);
      }
    } catch (error) {
      if (error.response?.data?.message) {
        toast.error(error.response.data.message);
      } else {
        toast.error(

);
      }
    } finally {
      setPasswordLoading(false);
    }
  };

  const closePasswordModal = () => {
    setShowPasswordModal(false);
    setPasswordData({
      currentPassword:

,
      newPassword:

,
      confirmPassword:

});
    setShowPasswords({
      current: false,
      new: false,
      confirm: false
    });
  };

  // Image upload functions
  const handleImageClick = () => {
    fileInputRef.current?.click();
  };

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const maxSize = 3 * 1024 * 1024; // 3MB
    if (file.size > maxSize) {
      toast.error(`File size is ${(file.size / (1024 * 1024)).toFixed(2)}MB. Please select a file smaller than 3MB.`);
      e.target.value =

;
      return;
    }

    const allowedTypes = [

Please select a valid image file (JPEG, PNG, GIF, or WebP)

;
      return;
    }

    try {
      setUploadingImage(true);
      const formData = new FormData();
      formData.append(

, file);

      const response = await apiService.uploadProfilePhoto(profileData._id, formData);
      if (response.data.success) {
        setProfileData({
          ...profileData,
          profilePic: response.data.url
        });
        await refreshUserData();
        toast.success(

);
      } else {
        toast.error(response.data.message ||

);
      }
    } catch (error) {
      if (error.response?.data?.message) {
        toast.error(error.response.data.message);
      } else if (error.response?.status === 413) {
        toast.error(

);
      } else {
        toast.error(

);
      }
    } finally {
      setUploadingImage(false);
      e.target.value =

;
    }
  };

  const getInitials = (username) => {
    if (!username) return

;
    return username.split(

).map(name => name[0]).join(

).toUpperCase().slice(0, 2);
  };

  if (!isAuthenticated) {
    return (
      <div className=

>
        <Loader color={document.documentElement.getAttribute(

} />
      </div>
    );
  }

  if (loading) {
    return (
      <div className=

>
        <Loader color={document.documentElement.getAttribute(

} />
      </div>
    );
  }

  return (
    <div className=

>
      {loading && <Loader color={document.documentElement.getAttribute(

} />}
      {/* Header */}
      <header className=

>
        <div className=

>
          <Link to=

>← Back to Home</Link>
          <h1>My Profile</h1>
          <button onClick={logout} className=

>Logout</button>
        </div>
      </header>

      <div className=

>
        {/* Left Side - Avatar & Name */}
        <div className=

>
          <div className=

>
            <div className=

onClick={!isEditing ? handleImageClick : undefined}>
              {profileData.profilePic ? (
                <img src={profileData.profilePic} alt=

onError={(e) => {
                    e.target.style.display =

;
                    e.target.nextSibling.style.display =

;
                  }}
                />
              ) : (
                <span>{getInitials(profileData.username)}</span>
              )}
              {!isEditing && (
                <div className=

>
                  <FaCamera size={16} />
                  <span>Change Photo</span>
                </div>
              )}
              {uploadingImage && (
                <div className=

>
                  <div className=

></div>
                  <span>Uploading...</span>
                </div>
              )}
            </div>
            <input
              type=

ref={fileInputRef}
              onChange={handleImageChange}
              accept=

style={{ display:

}}
            />
            <h2>{profileData.username}</h2>
            <p className=

>{profileData.isAdmin ?

}</p>
          </div>
        </div>

        {/* Right Side - Details */}
        <div className=

>
          <div className=

>
            {!isEditing ? (
              <>
                <h3>Profile Details</h3>
                <div className=

>
                  <div className=

>
                    <div className=

>
                      <FaEnvelope />
                    </div>
                    <div className=

>
                      <div className=

>Email</div>
                      <div className=

>{profileData.email}</div>
                    </div>
                  </div>
                  <div className=

>
                    <div className=

>
                      <FaMapMarkerAlt />
                    </div>
                    <div className=

>
                      <div className=

>Location</div>
                      <div className=

>{profileData.location ||

}</div>
                    </div>
                  </div>
                  <div className=

>
                    <div className=

>
                      <FaCalendarAlt />
                    </div>
                    <div className=

>
                      <div className=

>Date of Birth</div>
                      <div className=

>{profileData.dob ? new Date(profileData.dob).toLocaleDateString() :

}</div>
                    </div>
                  </div>
                  <div className=

>
                    <div className=

>
                      <FaUser />
                    </div>
                    <div className=

>
                      <div className=

>Status</div>
                      <div className=

>{profileData.isAdmin ?

}</div>
                    </div>
                  </div>
                </div>
                <div className=

>
                  <button onClick={handleEdit} className=

>
                    <FaEdit /> Edit Profile
                  </button>
                  <button onClick={() => setShowPasswordModal(true)} className=

>
                    <FaLock /> Change Password
                  </button>
                </div>
                {!profileData.isAdmin && (
                  <button onClick={toggleCertificates} className=

style={{ marginTop:

, background: certsOpen ?

: undefined }}>
                    {certsOpen ?

View Certificates

>
                <div className=

>
                  <button type=

onClick={handleImageClick} className=

disabled={uploadingImage}>
                    <FaUpload /> {uploadingImage ?

Change Photo

value={editData.username} onChange={handleChange} className=

placeholder=

/>
                </div>
                <div className=

>
                  <input type=

value={editData.email} onChange={handleChange} className=

placeholder=

/>
                </div>
                <div className=

>
                  <input type=

value={editData.location} onChange={handleChange} className=

placeholder=

/>
                </div>
                <div className=

>
                  <input type=

value={editData.dob} onChange={handleChange} className=

/>
                </div>
                <div className=

>
                  <button onClick={handleSave} className=

><FaSave /> Save</button>
                  <button onClick={handleCancel} className=

><FaTimes /> Cancel</button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
      {certsOpen && !profileData.isAdmin && (
        <div className=

style={{ margin:

, maxWidth:800, width:

, background:

1px solid var(--border-light)

1.25rem 1.5rem

var(--accent-color)

}}>
              <table className=

>
                <thead>
                  <tr>
                    <th>Event</th>
                    <th>Event Date</th>
                    <th>Registered</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody>
                  {certificates.map(c => (
                    <tr key={c.registrationId}>
                      <td>{c.eventTitle}</td>
                      <td>{new Date(c.eventDate).toLocaleDateString()}</td>
                      <td>{new Date(c.createdAt).toLocaleDateString()}</td>
                      <td>
                        <button className=

onClick={() => handleDownloadCert(c.registrationId, c.eventTitle)}>Download</button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      )}

      {/* Password Change Modal */}
      {showPasswordModal && (
        <div className=

onClick={closePasswordModal}>
          {passwordLoading && <Loader color={document.documentElement.getAttribute(

} />}
          <div className=

onClick={(e) => e.stopPropagation()}>
            <h3>Change Password</h3>
            <div className=

>
              <div className=

style={{ position:

}}>
                <input
                  type={showPasswords.current ?

}
                  name=

value={passwordData.currentPassword}
                  onChange={handlePasswordChange}
                  className=

placeholder=

disabled={passwordLoading}
                />
                <button
                  type=

onClick={() => togglePasswordVisibility(

)}
                  disabled={passwordLoading}
                  style={{
                    position:

,
                    right:

,
                    top:

,
                    transform:

,
                    background:

,
                    border:

,
                    color:

,
                    cursor: passwordLoading ?

,
                    opacity: passwordLoading ? 0.5 : 1
                  }}
                >
                  {showPasswords.current ? <FaEyeSlash /> : <FaEye />}
                </button>
              </div>
              <div className=

style={{ position:

}}>
                <input
                  type={showPasswords.new ?

}
                  name=

value={passwordData.newPassword}
                  onChange={handlePasswordChange}
                  className=

placeholder=

disabled={passwordLoading}
                />
                <button
                  type=

onClick={() => togglePasswordVisibility(

)}
                  disabled={passwordLoading}
                  style={{
                    position:

,
                    right:

,
                    top:

,
                    transform:

,
                    background:

,
                    border:

,
                    color:

,
                    cursor: passwordLoading ?

,
                    opacity: passwordLoading ? 0.5 : 1
                  }}
                >
                  {showPasswords.new ? <FaEyeSlash /> : <FaEye />}
                </button>
              </div>
              <div className=

style={{ position:

}}>
                <input
                  type={showPasswords.confirm ?

}
                  name=

value={passwordData.confirmPassword}
                  onChange={handlePasswordChange}
                  className=

placeholder=

disabled={passwordLoading}
                />
                <button
                  type=

onClick={() => togglePasswordVisibility(

)}
                  disabled={passwordLoading}
                  style={{
                    position:

,
                    right:

,
                    top:

,
                    transform:

,
                    background:

,
                    border:

,
                    color:

,
                    cursor: passwordLoading ?

,
                    opacity: passwordLoading ? 0.5 : 1
                  }}
                >
                  {showPasswords.confirm ? <FaEyeSlash /> : <FaEye />}
                </button>
              </div>
            </div>
            <div className=

>
              <button onClick={closePasswordModal} className=

disabled={passwordLoading}>
                Cancel
              </button>
              <button onClick={handlePasswordSubmit} className=

disabled={passwordLoading}>
                {passwordLoading ?

Change Password